# Exercice

On considère l'arbre binaire complet suivant :

![arbre_complet](image_arbre1.png)

On implémente cet arbre avec la classe **Noeud**

```python
class Noeud:

    def __init__(self, valeur=None, gauche=None, droite=None):
        self.valeur = valeur
        self.gauche = gauche
        self.droite = droite

    def estFeuille(self):
        if not self.gauche and not self.droite:
            return True
        else:
            return False
```
Un arbre vide se déclare par : ``` arbre_vide = None ```

La représentation de notre arbre est donc :

```python
trente = Noeud(30)
quarante = Noeud(40)
dixsept = Noeud(17)
huit = Noeud(8)
sept = Noeud(7,trente,quarante)
vingtetun = Noeud(21,dixsept,huit)
douze = Noeud(12,sept,vingtetun)
```
La fonction suivante permet de déterminer la somme maximale que l'on peut réaliser avec les valeurs de notre arbre en suivant les différentes branches.

Dans notre cas il s'agit de : 12 + 7 + 40 = 59

```python
def poids_maxi_branche(arbre):
    if arbre.estFeuille():
        return arbre.valeur
    else:
        return arbre.valeur + max(poids_maxi_branche(arbre.gauche),poids_maxi_branche(arbre.droite))
```
Cependant, si l'arbre n'est pas complet, cette fonction produit une erreur.

Votre travail consiste à modifier le code donné pour que la fonction soit également opérationnelle pour cet arbre :

![arbre](image_arbre2.png)
